
Table 1 Query:
Create Table EmployeeDemographics 
(EmployeeID int, 
FirstName varchar(50), 
LastName varchar(50), 
Age int, 
Gender varchar(50)
)

Table 2 Query:
Create Table EmployeeSalary 
(EmployeeID int, 
JobTitle varchar(50), 
Salary int
)

Table 1 Insert:
Insert into EmployeeDemographics VALUES
(1001, 'Jim', 'Halpert', 30, 'Male'),
(1002, 'Pam', 'Beasley', 30, 'Female'),
(1003, 'Dwight', 'Schrute', 29, 'Male'),
(1004, 'Angela', 'Martin', 31, 'Female'),
(1005, 'Toby', 'Flenderson', 32, 'Male'),
(1006, 'Michael', 'Scott', 35, 'Male'),
(1007, 'Meredith', 'Palmer', 32, 'Female'),
(1008, 'Stanley', 'Hudson', 38, 'Male'),
(1009, 'Kevin', 'Malone', 31, 'Male')

Table 2 Insert:
Insert Into EmployeeSalary VALUES
(1001, 'Salesman', 45000),
(1002, 'Receptionist', 36000),
(1003, 'Salesman', 63000),
(1004, 'Accountant', 47000),
(1005, 'HR', 50000),
(1006, 'Regional Manager', 65000),
(1007, 'Supplier Relations', 41000),
(1008, 'Salesman', 48000),
(1009, 'Accountant', 42000)


Insert more values into Tables:

INSERT INTO dbo.EmplyeeDemographics VALUES
(1011, 'Ryan', 'Howard', 26, 'Male'),
( NULL, 'Holly', 'Flax', NULL, 'NULL'),
(1013, 'Darryl', 'Philbin', NULL, 'Male')

INSERT INTO dbo.EmployeeSalary VALUES
(NULL, 'NULL', NULL),
(NULL, 'NULL', NULL),
(NULL, 'NULL', NULL),
(1010, 'NULL', 47000),
(NULL, 'Salesman', 43000)

JOINS

SELECT *
FROM dbo.EmplyeeDemographics

SELECT *
FROM dbo.EmployeeSalary

SELECT *
FROM dbo.EmplyeeDemographics
FULL OUTER JOIN dbo.EmployeeSalary
ON dbo.EmplyeeDemographics.EmployeeID = dbo.EmployeeSalary.EmployeeID

SELECT EmplyeeDemographics.EmployeeID, Firstname, Lastname, Jobtitle, Salary
FROM dbo.EmplyeeDemographics
LEFT OUTER JOIN dbo.EmployeeSalary
   ON dbo.EmplyeeDemographics.EmployeeID = dbo.EmployeeSalary.EmployeeID

   /*
   To get the employee with highest paid salary except from Michael Scott
   */

   SELECT EmplyeeDemographics.EmployeeID, Firstname, Lastname, Salary
FROM dbo.EmplyeeDemographics
INNER JOIN dbo.EmployeeSalary
   ON dbo.EmplyeeDemographics.EmployeeID = dbo.EmployeeSalary.EmployeeID
WHERE Firstname <> 'Michael'
ORDER BY Salary DESC

/*
How do you know the average salary of Salesmen in the organisation
*/

--SELECT Jobtitle, AVG(Salary)
--FROM dbo.EmplyeeDemographics
--INNER JOIN dbo.EmployeeSalary
--   ON dbo.EmplyeeDemographics.EmployeeID = dbo.EmployeeSalary.EmployeeID
--  WHERE Jobtitle = 'Salesman'
--  GROUP BY Jobtitle

CREATE ANOTHER TABLE:
CREATE TABLE WarehouseEmployeeDemographics
(EmployeeID int,
Firstname varchar(50),
Lastname varchar(50),
Age int,
Gender varchar(50)
)
INSERT VALUES:
--INSERT INTO dbo.WarehouseEmployeeDemographics VALUES
--(NULL, 'NULL', 'NULL', NULL, 'NULL'),
--(NULL, 'NULL', 'NULL', NULL, 'NULL'),
--(NULL, 'NULL', 'NULL', NULL, 'NULL'),
--(NULL, 'NULL', 'NULL', NULL, 'NULL'),
--(NULL, 'NULL', 'NULL', NULL, 'NULL'),
--(NULL, 'NULL', 'NULL', NULL, 'NULL'),
--(NULL, 'NULL', 'NULL', NULL, 'NULL'),
--(NULL, 'NULL', 'NULL', NULL, 'NULL'),
--(NULL, 'NULL', 'NULL', NULL, 'NULL'),
--(NULL, 'NULL', 'NULL', NULL, 'NULL'),
--(NULL, 'NULL', 'NULL', NULL, 'NULL'),
--(1013, 'Darryl', 'Philbin', NULL, 'Male'),
--(1050, 'Roy', 'Anderson', 31, 'Male'),
--(1051, 'Hidetoshi', 'Hasagawa', 40, 'Male'),
--(1052, 'Val', 'Johnson', 31, 'Female')


UNIONS

--SELECT *
--FROM dbo.EmplyeeDemographics
--Full Outer Join dbo.WarehouseEmployeeDemographics
--   ON dbo.EmplyeeDemographics.EmployeeID = dbo.WarehouseEmployeeDemographics.EmployeeID

--SELECT * FROM dbo.EmplyeeDemographics
--UNION
--SELECT * FROM dbo.WarehouseEmployeeDemographics


CASE STATEMENT

/*
Case Statement comes on the second line after your first select query and add END once done with the case
it is similar to IF or NESTED IF STATEMENT in Excel. For example, categorise employees younger than 30 as Young and others as old
*/

--select Firstname, Lastname, Age,
--case
--   when Age > 30 then 'Old'
--   when Age between 17 and 27 then 'Baby'
--   else 'Young'
--end as AgeGroup
--FROM [MSSQL Tutorial].dbo.EmplyeeDemographics
--where Age is not null
--order by Age

/*
Case Study using JOIN and CASE Statement: Increase Salaries and find out new salary figures
Salesman by (10%), HR(5%), Accountant (7%) OTHERS(3%)
*/

SELECT *
FROM [MSSQL Tutorial].dbo.EmplyeeDemographics
JOIN [MSSQL Tutorial].dbo.EmployeeSalary
ON [MSSQL Tutorial].dbo.EmplyeeDemographics.EmployeeID = [MSSQL Tutorial].dbo.EmployeeSalary.EmployeeID

SELECT Firstname, Lastname, Jobtitle, Salary,
CASE
   WHEN Jobtitle = 'Salesman' THEN Salary + (Salary * .10)
   WHEN Jobtitle = 'HR' THEN Salary + (Salary * .05)
   WHEN Jobtitle = 'Accountant' THEN Salary + (Salary * .007)
   ELSE Salary + (Salary * .03)
END AS NewSalary
FROM [MSSQL Tutorial].dbo.EmplyeeDemographics
JOIN [MSSQL Tutorial].dbo.EmployeeSalary
ON [MSSQL Tutorial].dbo.EmplyeeDemographics.EmployeeID = [MSSQL Tutorial].dbo.EmployeeSalary.EmployeeID


/*
HAVING CLAUSE - used in a situation that you don't want to use the WHERE Syntax.
Having Syntax comes after GROUP BY but before ORDER BY. HAVING and WHERE affects rows.
For example, how many employess are in the various job titles?
*/

SELECT Jobtitle, COUNT(JobTitle)
FROM dbo.EmplyeeDemographics
JOIN dbo.EmployeeSalary
ON dbo.EmplyeeDemographics.EmployeeID = dbo.EmployeeSalary.EmployeeID
GROUP BY Jobtitle

/*
How many Jobtitles has more than one employee? ... and this is how to use HAVING CLAUSE
*/

SELECT Jobtitle, COUNT(JobTitle)
FROM dbo.EmplyeeDemographics
JOIN dbo.EmployeeSalary
ON dbo.EmplyeeDemographics.EmployeeID = dbo.EmployeeSalary.EmployeeID
GROUP BY Jobtitle
HAVING COUNT(Jobtitle) > 1

/*
UPDATING ROWS IN A TABLE ... UPDTAE Syntax is used and it works with SET and WHERE Syntax. You can update Null values in a table
For example: Update the Null Values in the EmployeeDemographics Table
*/

SELECT *
FROM dbo.EmplyeeDemographics

UPDATE dbo.EmplyeeDemographics
SET EmployeeID = 1012, Age = 31, Gender = 'Female'
WHERE Firstname = 'Holly' AND Lastname = 'Flax'

UPDATE dbo.EmplyeeDemographics
SET Age = 36
WHERE EmployeeID = 1013

/*
PARTITION BY ... it simply shows the result a GROUP BY will give you and still retain the other parts of the table.
It simply partitions the table and filter as well. It uses OVER (PARTITION BY...)
*/

SELECT Firstname, Lastname, Gender, Salary, 
COUNT(Gender) OVER (PARTITION BY Gender) AS TotalGender
FROM dbo.EmplyeeDemographics
JOIN dbo.EmployeeSalary
ON dbo.EmplyeeDemographics.EmployeeID = dbo.EmployeeSalary.EmployeeID

/*
CREATE TEMP TABLE: temp table makes your query works faster when you have lots of tables. You can use select statement to
extract your data and convert / insert it to a temp table instead of going to various tables again. Simply work with your temp table
... you can create it like a usual process of table creation as well */

CREATE TABLE #temp_Employee (
EmployeeID int,
JobTitle varchar(100),
Salary int
)

SELECT *
FROM #temp_Employee


INSERT INTO #temp_Employee
SELECT *
FROM dbo.EmployeeSalary

INSERT INTO #temp_Employee VALUES (
'1001', 'HR', '45000'
)

DROP TABLE IF EXISTS #Temp_Employee2
CREATE TABLE #Temp_Employee2 (
JobTitle varchar(50),
EmployeesPerJob int,
AvgAge int,
AvgSalary int)

SELECT *
FROM #Temp_Employee2

INSERT INTO #Temp_Employee2
SELECT Jobtitle, COUNT(Jobtitle), AVG(Age), AVG(Salary)
FROM dbo.EmplyeeDemographics emp
JOIN dbo.EmployeeSalary sal
  ON emp.EmployeeID = sal.EmployeeID
GROUP BY Jobtitle

SELECT *
FROM #Temp_Employee2

/* what Temp Table as done above is that instead of always writing out all those long query to get this result,
simply select the Temp Table Employee2.
If you will be doing Stored Procedure, add DROP TABLE IF EXISTS #Temp_Employee2 as seen above, before code to create temp_table
*/
